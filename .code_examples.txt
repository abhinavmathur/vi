<% res = Amazon::Ecs.item_lookup('0804139296', {response_group: 'Medium, BrowseNodes'}) %>




<br>
<br>

<% varr = res.get_elements('Feature') %>
<% unless varr.nil? %>
    <% p varr.each do |qqqqqq| %>
        <%= p qqqqqq.inspect %>
    <% end %>
<% end %>

<% #res.get_elements('Feature').marshal_dump %>
<%# Amazon::Ecs.browse_node_lookup("34").marshal_dump %>
<% qqq = res.get_elements('BrowseNode') %>
<% arr = [] %>
<% qqq.each do |node| %>
    <%= node.get('Name') %>
    <%= node.get('IsCategoryRoot') %>
    <% arr.push(node.get('Name')) %>
    <% arr.push(node.get('IsCategoryRoot')) unless node.get('IsCategoryRoot').blank? %>
    <br>
<% end %>
====
<%= arr[arr.index('1') + 1].to_s %>
=====
<% nodes =  res.get_element('BrowseNodes')%>

<%= nodes.get_element('BrowseNodeId') %>
<%= res.get_element('IsEligibleForPrime') %>
----
<br>
<br>
<%= res.get_element('ASIN').to_s.html_safe %>
<br>
<%  item_attributes = res.get_element('ItemAttributes') %>
<br>
<p>List price</p>
<%= item_attributes.get('ListPrice') %>
<br>
<p>label</p>
<%= item_attributes.get('Label') %>
<br>
<p>product group</p>
<%= item_attributes.get('ProductGroup') %>
................
<br>
<p>subcategory</p>
<%= item_attributes.get('ProductTypeSubcategory') %>
<br>
<br>
<%= res.get_element('Content').to_s.html_safe %>

<% eee =  res.get_elements('LargeImage/URL')%>
<% eee.each do |image| %>
    <%= raw image %>
<% end %>








<ul class="collection">
  <li><%= link_to 'Manage Categories', admin_categories_path %></li>
  <li class="collection-item">Alvin</li>
  <li class="collection-item">Alvin</li>
  <li class="collection-item">Alvin</li>
  <li class="collection-item">Alvin</li>
</ul>

---------devise sign in code-----
<%= simple_form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %>
  <%= f.error_notification %>

  <div class="form-inputs">
    <%= f.input :email, required: true, autofocus: true %>
    <%= f.input :password, required: true, hint: ("#{@minimum_password_length} characters minimum" if @minimum_password_length) %>
    <%= f.input :password_confirmation, required: true %>
  </div>

  <div class="form-actions">
    <%= f.button :submit, "Sign up" %>
  </div>
<% end %>

<%= render "devise/shared/links" %>


-----------------review create----------------------
def create
    @product
    product_id = params[:product_id].to_i

    if Product.exists?(id: product_id)
      @product = Product.find_by(id: product_id)
    else
      flash[:error] = 'Wrong product ID supplied'
      redirect_to root_path
    end
    if Review.youtube_video_belongs_to_user?(current_user, params[:review][:youtube_url]) && params[:review][:youtube_url].present?
      @review = @product.reviews.create(review_params)
      @review.reviewer_id = current_user.id
      if @review.save
        flash[:notice] = 'Review was created successfully'
        redirect_to review_path(@review) and return
      else
        flash[:error] = @review.errors.full_messages.to_sentence
        redirect_to new_review_path(product_id: product_id)
      end
    else
      flash[:danger] = 'The YouTube video ID supplied does not belong to your YouTube account'
      redirect_to new_review_path(product_id: product_id)
    end
    @review = @product.reviews.create(review_params)
    @review.reviewer_id = current_user.id
    if @review.save
      flash[:notice] = 'Review was created successfully'
      redirect_to review_path(@review) and return
    else
      flash[:error] = @review.errors.full_messages.to_sentence
      redirect_to new_review_path(product_id: product_id)
    end
  end


  ==================
  AJAX POST
  ++++++++++++++++++


  $('.external_link').click(function (e) {
      e.preventDefault();
      <% if user_signed_in? %>
      $.ajax({
        url: 'http://localhost:3000/reviews/<%= @review.slug %>/redirect_to_website',
        type: 'POST',
        data: { affiliate_website: "<%= @review.affiliate_link %>"},
        success: function () {
          window.open('<%= @review.affiliate_link %>', 'newPage' )
        },
        error: function (e) {
          alert('There was a problem with the link. Please contact the reviewer to fix it')
        }
      });
      <% else %>
      $('#modal2').openModal();
      <% end %>
    });

    ================================================================================
    DEVISE EDIT REGISTRATION

<h2>Edit <%= resource_name.to_s.humanize %></h2>

<%= simple_form_for(resource, as: resource_name, url: registration_path(resource_name), html: { method: :put }) do |f| %>
  <%= f.error_notification %>

  <div class="form-inputs">
    <%= f.input :email, required: true, autofocus: true %>

    <% if devise_mapping.confirmable? && resource.pending_reconfirmation? %>
      <p>Currently waiting confirmation for: <%= resource.unconfirmed_email %></p>
    <% end %>

    <%= f.input :password, autocomplete: "off", hint: "leave it blank if you don't want to change it", required: false %>
    <%= f.input :password_confirmation, required: false %>
    <%= f.input :current_password, hint: "we need your current password to confirm your changes", required: true %>
  </div>

  <div class="form-actions">
    <%= f.button :submit, "Update" %>
  </div>
<% end %>

<h3>Cancel my account</h3>

<p>Unhappy? <%= link_to "Cancel my account", registration_path(resource_name), data: { confirm: "Are you sure?" }, method: :delete %></p>

<%= link_to "Back", :back %>

------------------------------------------------------------------------------------


    $('#review_title, #review_youtube_url, #review_affiliate_tag').blur(function(){
      var review_title = $('#review_title').val();
      var review_youtube_url = $('#review_youtube_url').val();
      var review_affiliate_tag = $('#review_affiliate_tag').val();
      if(review_title.length > 0 && !$(".title-error").children().length > 0)
      {
        $.ajax({
          method: 'POST',
          url: 'http://localhost:3000/reviews/check_youtube_id',
          data: { title: review_title }
        })
      }
      if(review_youtube_url.length > 0 && !$(".youtube-id-error").children().length > 0)
      {
        $.ajax({
          method: 'POST',
          url: 'http://localhost:3000/reviews/check_youtube_id',
          data: { youtube_id: review_youtube_url }
        })
      }
      if(review_affiliate_tag.length > 0 && !$(".affiliate-tag-error").children().length > 0)
      {
        $.ajax({
          method: 'POST',
          url: 'http://localhost:3000/reviews/check_affiliate_tag',
          data: { affiliate_tag: review_affiliate_tag }
        })
      }
    })


def check_title
    title = params[:title]
    if Review.exists?(title: title)
      @error = 'title-error'
    else
      @error = ''
    end
  end

  def check_youtube_id
    youtube_id = params[:youtube_id]
    if Review.exists?(youtube_url: youtube_id)
      @error = 'youtube-id-error'
    else
      @error = ''
    end
  end

  def check_affiliate_tag
    affiliate_tag = params[:affiliate_tag]
    review = Review.where(affiliate_tag: affiliate_tag).first
    unless review.nil?
      unless review.reviewer_id == current_user.id
        return @error = 'affiliate-tag-error'
      end
    end
    @error = ''

  end


  <script type="text/javascript" charset="utf-8">
    var _0x162b=["\x25\x32\x30","\x72\x65\x70\x6C\x61\x63\x65","\x73\x65\x61\x72\x63\x68","\x65\x78\x65\x63","\x5B\x3F\x7C\x26\x5D","\x3D","\x28\x5B\x5E\x26\x3B\x5D\x2B\x3F\x29\x28\x26\x7C\x23\x7C\x3B\x7C\x24\x29",""];function getURLParameter(_0x796ax2){return decodeURIComponent(( new RegExp(_0x162b[4]+ _0x796ax2+ _0x162b[5]+ _0x162b[6])[_0x162b[3]](location[_0x162b[2]])|| [,_0x162b[7]])[1][_0x162b[1]](/\+/g,_0x162b[0]))|| null}

  </script>

  <%= form_for Review.new do |f| %>

      <script>$("input[name='product_id']").val(getURLParameter('product_id'));</script>
      <input type="hidden" name="product_id" value="">


      <div class="row">
        <div class="input-field col s12">
          <%= f.text_field :title, data: { validation: 'required'}  %>
          <%= f.label :title %>
        </div>
        <div class="title-error error-box">

        </div>
      </div>

      <div class="row">
        <div class="input-field col s12">
          <%= f.text_area :description, class: 'materialize-textarea', data: { validation: 'required'} %>
          <%= f.label :description %>
        </div>
      </div>

      <div class="row">
        <div class="input-field col s12">
          <%= f.text_field :tags, data: { validation: 'required'} %>
          <%= f.label :tags %>
        </div>
      </div>

      <div class="row">
        <div class="input-field col s12">
          <%= f.select(:reviewgroup_id, Reviewgroup.select(current_user), include_blank: 'Select a saved group') %>
          <%= f.label 'Select Review group' %>
        </div>
      </div>

      <div class="row">
        <div class="input-field col s12">
          <%= f.text_field :youtube_url, data: { validation: 'length', validation_length: '11-11',
           :validation_error_msg => 'Must be a 11 character YouTube ID'} %>
          <%= f.label :youtube_url, 'YouTube video ID' %>
        </div>
        <div class="youtube-id-error error-box">
        </div>
      </div>

      <div class="row">
        <div class="input-field col s12">
          <%= f.text_field :affiliate_tag, data: { validation: 'custom',
                                                                    validation_regexp: '[a-zA-Z0-9]-20$',
          validation_error_msg: 'Should be a valid Amazon affiliate tag ending with -20'}  %>
          <%= f.label :affiliate_tag, 'Your Amazon Affiliate Tag goes here' %>
        </div>
        <div class="affiliate-tag-error error-box">
        </div>
      </div>

      <div class="row">
        <div class="input-field col s12">
          <%= f.submit 'Save Review' %>
        </div>
      </div>
  <% end %>

  <%= yield(:user_validators) %>

  <%= render 'javascripts/reviews/youtube_form' %>


  ---------------------------------------------------------------------------------------------

=======================================================================================

acts as taggable code
ActsAsTaggableOn::Tagging.includes(:tag).where(context: 'deshanatags').map { |tagging| { 'id' => tagging.tag_id.to_s, 'name' => tagging.tag.name } }.uniq





